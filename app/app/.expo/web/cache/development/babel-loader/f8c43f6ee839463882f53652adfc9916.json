{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\marce\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\730-cad-user-api\\\\app\\\\src\\\\pages\\\\RecoverPassword\\\\index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useNavigation } from '@react-navigation/native';\nimport { ContainerLogin, Logo, ImageLogo, InputForm, BtnSubmitForm, TxtSubmitForm, LinkNewUser, LoadingArea } from \"../../styles/custom_adm\";\nimport api from \"../../config/api\";\nexport default function RecoverPassword() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var navigation = useNavigation();\n\n  var recoverPass = function recoverPass() {\n    return _regeneratorRuntime.async(function recoverPass$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (validate()) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            setLoading(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(api.post('/recover-password-app', {\n              email: email\n            }).then(function (response) {\n              Alert.alert(\"\", response.data.mensagem);\n              setLoading(false);\n              navigation.navigate('VerifyKey');\n            }).catch(function (err) {\n              if (err.response) {\n                setLoading(false);\n                Alert.alert(\"\", err.response.data.mensagem);\n              } else {\n                setLoading(false);\n                Alert.alert(\"\", \"Erro: Tente mais tarde!\");\n              }\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var validate = function validate() {\n    if (!email) {\n      Alert.alert(\"\", \"Erro: Necessário preencher o campo e-mail!\");\n      return false;\n    }\n\n    return true;\n  };\n\n  return React.createElement(ScrollView, {\n    contentContainerStyle: {\n      flexGrow: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, React.createElement(ContainerLogin, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, React.createElement(Logo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, React.createElement(ImageLogo, {\n    source: require(\"../../../assets/logo.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  })), React.createElement(InputForm, {\n    placeholder: \"E-mail\",\n    autoCorrect: false,\n    value: email,\n    keyboardType: \"email-address\",\n    autoCapitalize: \"none\",\n    editable: !loading,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }), React.createElement(BtnSubmitForm, {\n    disabled: loading,\n    onPress: recoverPass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, React.createElement(TxtSubmitForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, \"Enviar\")), React.createElement(LinkNewUser, {\n    onPress: function onPress() {\n      navigation.navigate('Login');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Login\"), loading && React.createElement(LoadingArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/marce/OneDrive/Área de Trabalho/730-cad-user-api/app/src/pages/RecoverPassword/index.js"],"names":["React","useState","useNavigation","ContainerLogin","Logo","ImageLogo","InputForm","BtnSubmitForm","TxtSubmitForm","LinkNewUser","LoadingArea","api","RecoverPassword","email","setEmail","loading","setLoading","navigation","recoverPass","validate","post","then","response","Alert","alert","data","mensagem","navigate","catch","err","flexGrow","require","text"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport { ScrollView, Alert, ActivityIndicator } from \"react-native\";\r\n\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nimport { ContainerLogin, Logo, ImageLogo, InputForm, BtnSubmitForm, TxtSubmitForm, LinkNewUser, LoadingArea } from '../../styles/custom_adm';\r\n\r\nimport api from '../../config/api';\r\n\r\nexport default function RecoverPassword() {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const navigation = useNavigation();\r\n\r\n    const recoverPass = async () => {\r\n        if (!validate()) return;\r\n\r\n        setLoading(true);\r\n\r\n        await api.post('/recover-password-app', { email })\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            Alert.alert(\"\", response.data.mensagem);\r\n            setLoading(false);            \r\n            navigation.navigate('VerifyKey');\r\n        }).catch((err) => {\r\n            if (err.response) {\r\n                //console.log(err.response);\r\n                setLoading(false);\r\n                Alert.alert(\"\", err.response.data.mensagem);\r\n            } else {\r\n                setLoading(false);\r\n                Alert.alert(\"\", \"Erro: Tente mais tarde!\");\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    const validate = () => {\r\n        if (!email) {\r\n            Alert.alert(\"\", \"Erro: Necessário preencher o campo e-mail!\");\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return (\r\n\r\n        <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\r\n            <ContainerLogin>\r\n                <Logo>\r\n                    <ImageLogo source={require('../../../assets/logo.png')} />\r\n                </Logo>\r\n\r\n                <InputForm\r\n                    placeholder=\"E-mail\"\r\n                    autoCorrect={false}\r\n                    value={email}\r\n                    keyboardType=\"email-address\"\r\n                    autoCapitalize=\"none\"\r\n                    editable={!loading}\r\n                    onChangeText={text => setEmail(text)}\r\n                />\r\n\r\n                <BtnSubmitForm disabled={loading} onPress={recoverPass} >\r\n                    <TxtSubmitForm>\r\n                        Enviar\r\n                    </TxtSubmitForm>\r\n                </BtnSubmitForm>\r\n\r\n                <LinkNewUser onPress={() => { navigation.navigate('Login') }}>\r\n                    Login\r\n                </LinkNewUser>\r\n\r\n                {loading &&\r\n                    <LoadingArea>\r\n                        <ActivityIndicator size=\"large\" color=\"#fff\" />\r\n                    </LoadingArea>\r\n                }\r\n            </ContainerLogin>\r\n        </ScrollView>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}